module ALU_Control(ALUop , Func , ALUctrl);
	input [1:0] ALUop;
	input [5:0] Func;
	output reg[2:0] ALUctrl;

	always@(ALUop or Func) begin
		case(ALUop)
			2'b00://add , sub , and , or , slt
				begin 
				if(Func==6'b000001) begin  
					ALUctrl <= 3'd0;  //add
				end else if(Func==6'b000010) begin
					ALUctrl <= 3'd1;  //sub
				end else if(Func==6'b000100) begin
					ALUctrl <= 3'd2;  //and
				end else if(Func==6'b001000) begin
					ALUctrl <= 3'd3;  //or
				end else if(Func==6'b010000) begin
					ALUctrl <= 3'd4;  //slt
				end
				end
				
			2'b01://addi , lw , sw
				begin 
					ALUctrl <= 3'd0;  //add
				end

			2'b10://slti 
				begin 
					ALUctrl <= 3'd4;  //slt
				end
			2'b11://beq
				begin 
					ALUctrl <= 3'd1;  //sub
				end
		endcase
	end
endmodule

`define RT 6'b000000
`define ADDI 6'b000001
`define SLTI 6'b000010
`define LW 6'b000011
`define SW 6'b000100
`define BEQ 6'b000101
`define J 6'b000110
`define JR 6'b000111
`define JAL 6'b001000
module Controller(clk,EQ,OPC,RegDst,RegWrite,Jal,Jr,Jmp,MemtoReg,MemRead,MemWrite,ALUSrc,PCSrc,ALUop);
	input clk,EQ;
	input[5:0]OPC;
	output reg RegDst,RegWrite,Jal,Jr,Jmp,MemtoReg,MemRead,MemWrite,ALUSrc,PCSrc;
	output reg[1:0]ALUop;

	always@(OPC or EQ) begin 
		{RegDst,RegWrite,Jal,Jr,Jmp,MemtoReg,MemRead,MemWrite,ALUSrc,PCSrc,ALUop}<=12'd0;
		case(OPC)
			`RT: begin
				RegDst<=1;
				Jal<=0;
				RegWrite<=1;
				ALUSrc<=0;
				ALUop<=2'b00;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=0;
				Jr<=0;
			end
			`ADDI: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=1;
				ALUSrc<=1;
				ALUop<=2'b01;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=0;
				Jr<=0;
			end
			`SLTI: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=1;
				ALUSrc<=1;
				ALUop<=2'b10;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=0;
				Jr<=0;
			end
			`LW: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=1;
				ALUSrc<=1;
				ALUop<=2'b01;
				MemRead<=1;
				MemWrite<=0;
				MemtoReg<=1;
				PCSrc<=0;
				Jmp<=0;
				Jr<=0;
			end
			`SW: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=0;
				ALUSrc<=1;
				ALUop<=2'b01;
				MemRead<=0;
				MemWrite<=1;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=0;
				Jr<=0;
			end
			`BEQ: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=0;
				ALUSrc<=0;
				ALUop<=2'b11;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=EQ;
				Jmp<=0;
				Jr<=0;
			end
			`J: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=0;
				ALUSrc<=0;
				ALUop<=2'b00;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=1;
				Jr<=0;
			end
			`JR: begin 
				RegDst<=0;
				Jal<=0;
				RegWrite<=0;
				ALUSrc<=0;
				ALUop<=2'b00;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=0;
				Jr<=1;
			end
			`JAL: begin 
				RegDst<=0;
				Jal<=1;
				RegWrite<=1;
				ALUSrc<=0;
				ALUop<=2'b00;
				MemRead<=0;
				MemWrite<=0;
				MemtoReg<=0;
				PCSrc<=0;
				Jmp<=1;
				Jr<=0;
			end
		endcase
	end
endmodule

module ForwardingUnit(clk,RegWriteM,RegWriteWB,RsEX,RtEX,RdM,RdWB,ForwardA,ForwardB);
	input clk,RegWriteM,RegWriteWB;
	input [4:0] RsEX,RtEX,RdM,RdWB;
	output reg [1:0] ForwardA,ForwardB;
	
	always @(negedge clk) begin
		if( (RegWriteM == 1) & (RdM == RsEX) & ~(RdM == 5'd0) ) begin
			ForwardA <= 2'b10;
		end else if ( (RegWriteWB == 1) &  (RdWB == RsEX) & ~(RdWB == 5'd0) ) begin
			ForwardA <= 2'b01;
		end else begin 
			ForwardA <= 2'b00;
		end
	end
	always @(negedge clk) begin
		if( (RegWriteM == 1) & (RdM == RtEX) & ~(RdM == 5'd0) ) begin
			ForwardB <= 2'b10;
		end else if ( (RegWriteWB == 1) &  (RdWB == RtEX) & ~(RdWB == 5'd0) ) begin
			ForwardB <= 2'b01;
		end else begin 
			ForwardB <= 2'b00;
		end
	end
	/*always @(posedge clk) begin
		ForwardA <= 2'b00;
		ForwardB <= 2'b00;
	end*/
endmodule

module HazardUnit(clk,RsID,RtID,RtEX,MemReadEX,PCWrite,IF_ID_Write,ctrl0);
	input clk,MemReadEX;
	input [4:0] RsID, RtID, RtEX;
	output reg PCWrite,IF_ID_Write,ctrl0;
	
	always @ (negedge clk) begin
		if(MemReadEX & ((RtID == RtEX) | (RsID == RtEX)))
			{PCWrite,IF_ID_Write,ctrl0} <= 3'b001;
		else
			{PCWrite,IF_ID_Write,ctrl0} <= 3'b110;
	end
endmodule


